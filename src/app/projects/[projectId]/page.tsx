'use client';

import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import supabase from "@/lib/supabase";
import { useUser } from "@clerk/nextjs";
import { SendHorizonal, FileCode, FolderTree, Play, Loader2, FileText, Folder, ChevronRight, ChevronDown, Code2, MessageSquare, X, PlayCircle, Square, Eye, Code, RefreshCw, Download, Terminal, Plus, Trash2 } from "lucide-react";
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { useParams } from "next/navigation";
import { useState, useEffect, useRef } from "react";
import { toast } from "sonner";

// Enhanced file system with Next.js support
const initialFiles: { [key: string]: string } = {
    'package.json': `{
  "name": "vibecoding-project",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "next": "14.0.0",
    "@clerk/nextjs": "^4.0.0",
    "@clerk/clerk-react": "^4.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.0.0",
    "postcss": "^8.0.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "14.0.0"
  }
}`,
    'next.config.js': `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig`,
    'tailwind.config.js': `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`,
    'postcss.config.js': `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`,
    'tsconfig.json': `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`,
    'app/layout.tsx': `import { Inter } from 'next/font/google'
import { ClerkProvider } from '@clerk/nextjs'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'VibeCoding Project',
  description: 'Generated by VibeCoding',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={inter.className}>{children}</body>
      </html>
    </ClerkProvider>
  )
}`,
    'app/globals.css': `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`,
    'app/page.tsx': `'use client';

import { useUser } from '@clerk/nextjs'

export default function Home() {
  const { user } = useUser();

  return (
    <div className="min-h-screen p-8">
      <h1 className="text-4xl font-bold mb-4">Hello {user?.firstName}</h1>
      <p className="text-lg mb-8">Welcome to your Next.js application powered by VibeCoding</p>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 border rounded-lg bg-white/10 backdrop-blur">
          <h3 className="text-xl font-semibold mb-2">Next.js</h3>
          <p className="text-gray-600">Full-stack React framework</p>
        </div>
        <div className="p-6 border rounded-lg bg-white/10 backdrop-blur">
          <h3 className="text-xl font-semibold mb-2">TypeScript</h3>
          <p className="text-gray-600">Type-safe development</p>
        </div>
        <div className="p-6 border rounded-lg bg-white/10 backdrop-blur">
          <h3 className="text-xl font-semibold mb-2">Clerk</h3>
          <p className="text-gray-600">Authentication ready</p>
        </div>
      </div>
    </div>
  );
}`,
    'middleware.ts': `import { authMiddleware } from "@clerk/nextjs";

export default authMiddleware({
  publicRoutes: ["/"],
});

export const config = {
  matcher: ["/((?!.+\\.[\\w]+$|_next).*)", "/", "/(api|trpc)(.*)"],
};`,
    '.env.local': `# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_your-publishable-key
CLERK_SECRET_KEY=sk_test_your-secret-key
`,
    'components.json': `{
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "rsc": true
}`
};

// Types
interface AIPlan {
    instructions: string;
    summary: string;
}

interface TerminalCommand {
    id: string;
    command: string;
    output: string;
    status: 'success' | 'error' | 'running';
}

interface FileEditor {
    path: string;
    content: string;
    isDirty: boolean;
}

const Page = () => {
    const { projectId } = useParams();
    const [project, setProject] = useState<any>(null);
    const [prompt, setPrompt] = useState<string>('');
    const [promptWords, setPromptWords] = useState<number>(0);
    const [messages, setMessages] = useState<any[]>([]);
    const [isProcessing, setIsProcessing] = useState(false);
    const [files, setFiles] = useState(initialFiles);
    const [selectedFile, setSelectedFile] = useState('app/page.tsx');
    const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(['app', 'components']));
    const [currentAction, setCurrentAction] = useState<string | null>(null);
    const [generatedPlan, setGeneratedPlan] = useState<AIPlan | null>(null);
    const [showPlanApproval, setShowPlanApproval] = useState(false);
    const [isExecuting, setIsExecuting] = useState(false);
    const [isPreviewRunning, setIsPreviewRunning] = useState(false);
    const [previewUrl, setPreviewUrl] = useState<string | null>(null);
    const [previewLoading, setPreviewLoading] = useState(false);
    const [activeTab, setActiveTab] = useState<'preview' | 'code' | 'terminal'>('code');
    const [editableInstructions, setEditableInstructions] = useState<string>('');
    const [previewKey, setPreviewKey] = useState<number>(0);
    const [terminalCommands, setTerminalCommands] = useState<TerminalCommand[]>([]);
    const [currentCommand, setCurrentCommand] = useState<string>('');
    const [isRunningCommand, setIsRunningCommand] = useState(false);
    const [fileEditors, setFileEditors] = useState<FileEditor[]>([]);
    const [isEditing, setIsEditing] = useState<boolean>(false);

    const chatEndRef = useRef<HTMLDivElement>(null);
    const iframeRef = useRef<HTMLIFrameElement>(null);
    const terminalEndRef = useRef<HTMLDivElement>(null);
    const fileEditorRef = useRef<HTMLTextAreaElement>(null);

    const { user } = useUser();

    const updateProjectCode = async (projectId: string, files: typeof initialFiles) => {
        try {
            const { error } = await supabase
                .from('projects')
                .update({
                    code: files,
                    updated_at: new Date().toISOString()
                })
                .eq('id', projectId);

            if (error) {
                console.error('Error updating project code:', error);
                toast.error('Failed to save project');
            } else {
                console.log('Project code updated successfully');
            }
        } catch (error) {
            console.error('Error updating project:', error);
        }
    };

    const initialVerification = async () => {
        const { data, error } = await supabase.from('projects')
            .select('*')
            .eq('id', projectId)
            .single();

        if (error) {
            toast.error('Error fetching project: ' + error.message);
            return;
        }

        if (user?.id === data.user_id) {
            setProject(data);
            if (data.code) {
                setFiles(data.code);
            }
        } else {
            toast.error('Error fetching project: Unauthorized access');
        }
    }

    useEffect(() => {
        if (user && projectId) {
            initialVerification();
        }
    }, [user, projectId]);

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    useEffect(() => {
        terminalEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [terminalCommands]);

    // Initialize file editor when file is selected
    useEffect(() => {
        if (selectedFile && files[selectedFile]) {
            const existingEditor = fileEditors.find(editor => editor.path === selectedFile);
            if (!existingEditor) {
                setFileEditors(prev => [...prev, {
                    path: selectedFile,
                    content: files[selectedFile],
                    isDirty: false
                }]);
            }
        }
    }, [selectedFile, files]);

    const getCurrentEditor = () => {
        return fileEditors.find(editor => editor.path === selectedFile);
    };

    const handleFileEdit = (content: string) => {
        setFileEditors(prev => prev.map(editor =>
            editor.path === selectedFile
                ? { ...editor, content, isDirty: true }
                : editor
        ));
    };

    const saveFile = () => {
        const editor = getCurrentEditor();
        if (editor && editor.isDirty) {
            const updatedFiles = { ...files, [selectedFile]: editor.content };
            setFiles(updatedFiles);
            setFileEditors(prev => prev.map(e =>
                e.path === selectedFile ? { ...e, isDirty: false } : e
            ));

            if (projectId) {
                updateProjectCode(projectId as string, updatedFiles);
            }

            toast.success('File saved successfully');

            if (isPreviewRunning) {
                setTimeout(refreshPreview, 500);
            }
        }
    };

    const createNewFile = (path: string, content: string = '') => {
        const newFiles = { ...files, [path]: content };
        setFiles(newFiles);
        setSelectedFile(path);

        if (projectId) {
            updateProjectCode(projectId as string, newFiles);
        }

        toast.success(`Created ${path}`);
    };

    const deleteFile = (path: string) => {
        if (Object.keys(files).length <= 1) {
            toast.error('Cannot delete the last file');
            return;
        }

        const newFiles = { ...files };
        delete newFiles[path];
        setFiles(newFiles);

        if (selectedFile === path) {
            const remainingFiles = Object.keys(newFiles);
            setSelectedFile(remainingFiles[0]);
        }

        setFileEditors(prev => prev.filter(editor => editor.path !== path));

        if (projectId) {
            updateProjectCode(projectId as string, newFiles);
        }

        toast.success(`Deleted ${path}`);
    };

    const generatePreviewHTML = () => {
        // For Next.js projects, we'll show a simplified preview
        const appCode = files['app/page.tsx'] || files['app/page.jsx'] || files['app/page.js'] || '';

        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Next.js Preview - VibeCoding</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .preview-container {
            padding: 40px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .preview-info {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            border: 1px solid rgba(255,255,255,0.2);
        }
        .file-structure {
            background: white;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
        }
        .file-item {
            padding: 4px 8px;
            margin: 2px 0;
            font-family: monospace;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="preview-container">
        <div class="preview-info">
            <h1 class="text-3xl font-bold text-white mb-4">Next.js Project Preview</h1>
            <p class="text-white/80 mb-4">
                This is a preview of your Next.js application. The full development server would be running in a complete environment.
            </p>
            <div class="file-structure">
                <h3 class="font-semibold mb-3">Project Structure:</h3>
                ${Object.keys(files).map(file =>
            `<div class="file-item border-l-2 border-blue-500 pl-3">${file}</div>`
        ).join('')}
            </div>
        </div>
        <div class="text-center text-white/60">
            <p>Run "npm run dev" in the terminal to start the development server</p>
        </div>
    </div>
</body>
</html>`;
    };

    const startPreview = async () => {
        if (isPreviewRunning) {
            setIsPreviewRunning(false);
            setPreviewUrl(null);
            if (previewUrl) {
                URL.revokeObjectURL(previewUrl);
            }
            return;
        }

        setPreviewLoading(true);

        try {
            const htmlContent = generatePreviewHTML();
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);

            if (previewUrl) {
                URL.revokeObjectURL(previewUrl);
            }

            setPreviewUrl(url);
            setIsPreviewRunning(true);
            setPreviewKey(prev => prev + 1);

        } catch (error) {
            console.error('Preview error:', error);
            toast.error('Failed to start preview');
        } finally {
            setPreviewLoading(false);
        }
    };

    const refreshPreview = () => {
        if (!isPreviewRunning) return;

        const htmlContent = generatePreviewHTML();
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);

        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
        }

        setPreviewUrl(url);
        setPreviewKey(prev => prev + 1);
        toast.success('Preview refreshed');
    };

    const executeTerminalCommand = async (command: string) => {
        const commandId = Date.now().toString();
        const newCommand: TerminalCommand = {
            id: commandId,
            command,
            output: '',
            status: 'running'
        };

        setTerminalCommands(prev => [...prev, newCommand]);
        setIsRunningCommand(true);

        try {
            // Simulate command execution
            let output = '';
            let status: 'success' | 'error' = 'success';

            if (command.startsWith('npm install') || command.startsWith('npm i')) {
                output = 'Installing dependencies...\n';
                // Simulate package installation
                await new Promise(resolve => setTimeout(resolve, 2000));
                output += '✅ Dependencies installed successfully';
            } else if (command.startsWith('npm run dev')) {
                output = 'Starting Next.js development server...\n';
                output += 'Server running on http://localhost:3000\n';
                output += 'Ready in 2.1s';
            } else if (command.startsWith('npm run build')) {
                output = 'Building Next.js application...\n';
                await new Promise(resolve => setTimeout(resolve, 3000));
                output += '✅ Build completed successfully';
            } else if (command.startsWith('ls') || command.startsWith('dir')) {
                output = Object.keys(files).map(file => `📄 ${file}`).join('\n');
            } else if (command.startsWith('cat ') || command.startsWith('type ')) {
                const filePath = command.split(' ')[1];
                output = files[filePath] || `Error: File ${filePath} not found`;
                status = files[filePath] ? 'success' : 'error';
            } else {
                output = `Command executed: ${command}\nThis is a simulation. In a full implementation, this would execute in a WebContainer.`;
            }

            setTerminalCommands(prev =>
                prev.map(cmd =>
                    cmd.id === commandId
                        ? { ...cmd, output, status }
                        : cmd
                )
            );

        } catch (error) {
            setTerminalCommands(prev =>
                prev.map(cmd =>
                    cmd.id === commandId
                        ? { ...cmd, output: `Error: ${error}`, status: 'error' }
                        : cmd
                )
            );
        } finally {
            setIsRunningCommand(false);
            setCurrentCommand('');
        }
    };

    const handleTerminalKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && currentCommand.trim()) {
            executeTerminalCommand(currentCommand.trim());
        }
    };

    const convertReactToNextJS = (reactCode: string): string => {
        // Basic React to Next.js conversion
        return reactCode
            .replace(/import React from 'react';/g, "import React from 'react';")
            .replace(/export default function/g, 'export default function')
            .replace(/function App\(\)/g, 'export default function Home()')
            .replace(/<div className=/g, '<div className=')
            .replace(/className="/g, 'className="')
            .replace(/from 'react-dom';/g, "// Removed react-dom import for Next.js");
    };

    const generateDetailedInstructions = async (userPrompt: string, currentFiles: typeof files): Promise<AIPlan> => {
        const systemPrompt = `You are an expert full-stack developer specializing in Next.js, React, and modern web development. Analyze the user's request and provide comprehensive implementation instructions.

CURRENT NEXT.JS PROJECT:
${Object.entries(currentFiles).map(([path, content]) => `=== ${path} ===\n${content}\n`).join('\n')}

USER REQUEST: ${userPrompt}

Your response should include:

## TECHNICAL ANALYSIS
- Framework requirements (Next.js App Router vs Pages Router)
- TypeScript considerations
- Authentication needs (Clerk integration)
- API route requirements
- Database considerations

## SPECIFIC IMPLEMENTATION PLAN
1. File modifications needed
2. New components to create
3. API routes required
4. Type definitions
5. Styling approach (Tailwind CSS)

## TERMINAL COMMANDS
List necessary npm commands to run

## STEP-BY-STEP INSTRUCTIONS
Detailed technical implementation guide

Return comprehensive instructions that can be executed by both AI and developers.`;

        try {
            const response = await fetch('/api/gemini', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt: systemPrompt,
                    model: 'deepseek-reasoner'
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to generate instructions');
            }

            const data = await response.json();

            return {
                instructions: data.response,
                summary: 'Comprehensive implementation plan generated'
            };
        } catch (error) {
            console.error('Error generating instructions:', error);
            throw error;
        }
    };

    const executeInstructions = async (instructions: string, currentFiles: typeof files): Promise<any> => {
        const executionPrompt = `You are a full-stack development AI. Implement the following instructions in the Next.js project.

INSTRUCTIONS:
${instructions}

CURRENT PROJECT STATE:
${Object.entries(currentFiles).map(([path, content]) => `=== ${path} ===\n${content}\n`).join('\n')}

IMPLEMENTATION REQUIREMENTS:
1. Use Next.js 14 with App Router
2. Use TypeScript
3. Integrate Clerk for authentication when needed
4. Use Tailwind CSS for styling
5. Follow Next.js best practices

Return JSON with:
- updated_files: Object with complete file contents for modified/created files
- terminal_commands: Array of commands that should be executed
- execution_summary: Brief description of changes

Return ONLY valid JSON.`;

        try {
            const response = await fetch('/api/gemini', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt: executionPrompt,
                    model: 'deepseek-reasoner'
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to execute instructions');
            }

            const data = await response.json();

            try {
                const jsonMatch = data.response.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    const result = JSON.parse(jsonMatch[0]);

                    // Execute terminal commands from AI response
                    if (result.terminal_commands && Array.isArray(result.terminal_commands)) {
                        result.terminal_commands.forEach((cmd: string) => {
                            setTimeout(() => executeTerminalCommand(cmd), 1000);
                        });
                    }

                    return result;
                }
                return JSON.parse(data.response);
            } catch (parseError) {
                throw new Error('Invalid JSON response from AI');
            }
        } catch (error) {
            console.error('Error executing instructions:', error);
            throw error;
        }
    };

    const handleSend = async () => {
        if (!prompt.trim() || isProcessing) return;

        setIsProcessing(true);
        setMessages(prev => [...prev, { role: 'user', content: prompt }]);

        try {
            setCurrentAction('Analyzing your request and generating implementation plan...');

            const plan = await generateDetailedInstructions(prompt, files);
            setGeneratedPlan(plan);
            setEditableInstructions(plan.instructions);
            setShowPlanApproval(true);

            setMessages(prev => [...prev, {
                role: 'assistant',
                content: `I've created a comprehensive implementation plan for your Next.js project. Please review and edit the instructions below, then approve to execute.`,
                type: 'instructions'
            }]);

        } catch (error) {
            toast.error('Failed to generate instructions: ' + (error instanceof Error ? error.message : 'Unknown error'));
            console.error('Error:', error);
        } finally {
            setIsProcessing(false);
            setCurrentAction(null);
            setPrompt('');
            setPromptWords(0);
        }
    };

    const handleExecuteInstructions = async () => {
        if (!editableInstructions.trim()) return;

        setIsExecuting(true);
        setShowPlanApproval(false);

        try {
            setCurrentAction('Executing the implementation plan...');

            const result = await executeInstructions(editableInstructions, files);

            if (result.updated_files) {
                const updatedFiles = {
                    ...files,
                    ...result.updated_files
                };
                setFiles(updatedFiles);

                await updateProjectCode(projectId as string, updatedFiles);

                // Update file editors
                Object.keys(result.updated_files).forEach(path => {
                    setFileEditors(prev => prev.map(editor =>
                        editor.path === path
                            ? { ...editor, content: result.updated_files[path], isDirty: false }
                            : editor
                    ));
                });

                if (isPreviewRunning) {
                    setTimeout(() => {
                        refreshPreview();
                    }, 500);
                }
            }

            setMessages(prev => [...prev, {
                role: 'assistant',
                content: `✅ Implementation completed! ${result.execution_summary || 'Your project has been updated.'}`,
                type: 'execution_result',
                actions: Object.entries(result.updated_files || {}).map(([file]) => ({
                    type: 'file_edit',
                    file: file,
                    description: 'Updated based on implementation plan'
                }))
            }]);

            toast.success('Implementation completed successfully!');

        } catch (error) {
            toast.error('Failed to execute instructions: ' + (error instanceof Error ? error.message : 'Unknown error'));
            console.error('Error:', error);
        } finally {
            setIsExecuting(false);
            setCurrentAction(null);
            setGeneratedPlan(null);
            setEditableInstructions('');
        }
    };

    const handleRejectPlan = () => {
        setShowPlanApproval(false);
        setGeneratedPlan(null);
        setEditableInstructions('');
        setMessages(prev => [...prev, {
            role: 'assistant',
            content: 'Implementation plan rejected. Feel free to modify your request and try again.'
        }]);
    };

    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    const toggleFolder = (folder: string) => {
        setExpandedFolders(prev => {
            const newSet = new Set(prev);
            if (newSet.has(folder)) {
                newSet.delete(folder);
            } else {
                newSet.add(folder);
            }
            return newSet;
        });
    };

    const renderFileTree = () => {
        const tree: any = {};

        Object.keys(files).forEach(path => {
            const parts = path.split('/');
            let current = tree;

            parts.forEach((part, idx) => {
                if (idx === parts.length - 1) {
                    current[part] = { type: 'file', path };
                } else {
                    if (!current[part]) {
                        current[part] = { type: 'folder', children: {} };
                    }
                    current = current[part].children;
                }
            });
        });

        const renderNode = (name: string, node: any, level = 0) => {
            if (node.type === 'file') {
                return (
                    <div
                        key={node.path}
                        onClick={() => setSelectedFile(node.path)}
                        className={`flex items-center gap-2 px-3 py-1.5 cursor-pointer transition-colors rounded group ${selectedFile === node.path ? 'bg-primary/10 border-l-2 border-primary' : 'hover:bg-muted'
                            }`}
                        style={{ paddingLeft: `${level * 16 + 12}px` }}
                    >
                        <FileText className="w-4 h-4" />
                        <span className="text-sm flex-1">{name}</span>
                        <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={(e) => {
                                e.stopPropagation();
                                deleteFile(node.path);
                            }}
                        >
                            <Trash2 className="w-3 h-3" />
                        </Button>
                    </div>
                );
            }

            const isExpanded = expandedFolders.has(name);
            return (
                <div key={name}>
                    <div
                        onClick={() => toggleFolder(name)}
                        className="flex items-center gap-2 px-3 py-1.5 cursor-pointer transition-colors hover:bg-muted rounded group"
                        style={{ paddingLeft: `${level * 16 + 12}px` }}
                    >
                        {isExpanded ? (
                            <ChevronDown className="w-4 h-4" />
                        ) : (
                            <ChevronRight className="w-4 h-4" />
                        )}
                        <Folder className="w-4 h-4" />
                        <span className="text-sm font-medium flex-1">{name}</span>
                        <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={(e) => {
                                e.stopPropagation();
                                const newFile = `${name}/new-file.tsx`;
                                createNewFile(newFile, '// New file\n');
                            }}
                        >
                            <Plus className="w-3 h-3" />
                        </Button>
                    </div>
                    {isExpanded && (
                        <div>
                            {Object.entries(node.children).map(([childName, childNode]) =>
                                renderNode(childName, childNode, level + 1)
                            )}
                        </div>
                    )}
                </div>
            );
        };

        return Object.entries(tree).map(([name, node]) => renderNode(name, node));
    };

    useEffect(() => {
        return () => {
            if (previewUrl) {
                URL.revokeObjectURL(previewUrl);
            }
        };
    }, [previewUrl]);

    if (!project) {
        return (
            <div className="flex items-center justify-center h-screen">
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
                <span className="ml-3 text-lg">Loading project...</span>
            </div>
        );
    }

    return (
        <div className="h-screen flex flex-col bg-background">
            {/* Header */}
            <div className="border-b px-6 py-4 flex items-center justify-between bg-background shadow-sm">
                <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-primary/10">
                        <Code2 className="w-5 h-5 text-primary" />
                    </div>
                    <div>
                        <div className="font-bold text-lg">{project.name}</div>
                        <div className="text-xs text-muted-foreground font-mono">Next.js • TypeScript • Clerk</div>
                    </div>
                </div>
                <div className="flex gap-2">
                    {isPreviewRunning && (
                        <Button
                            onClick={refreshPreview}
                            variant="outline"
                            size="sm"
                            className="gap-2 h-10"
                        >
                            <RefreshCw className="w-4 h-4" />
                            Refresh
                        </Button>
                    )}
                    <Button
                        onClick={startPreview}
                        variant={isPreviewRunning ? "destructive" : "default"}
                        size="sm"
                        className="gap-2 h-10 min-w-[120px]"
                        disabled={previewLoading}
                    >
                        {previewLoading ? (
                            <Loader2 className="w-4 h-4 animate-spin" />
                        ) : isPreviewRunning ? (
                            <>
                                <Square className="w-4 h-4" />
                                Stop
                            </>
                        ) : (
                            <>
                                <Play className="w-4 h-4" />
                                Run Preview
                            </>
                        )}
                    </Button>
                    <Button
                        onClick={async () => {
                            try {
                                const zip = new JSZip();
                                Object.entries(files).forEach(([path, content]) => {
                                    zip.file(path, content);
                                });
                                const blob = await zip.generateAsync({ type: 'blob' });
                                saveAs(blob, `${project.name || 'project'}.zip`);
                            } catch (error) {
                                console.error('Failed to create zip:', error);
                                toast.error('Failed to create zip');
                            }
                        }}
                        variant="outline"
                        size="sm"
                        className="gap-2 h-10"
                    >
                        <Download className="w-4 h-4" />
                        Download ZIP
                    </Button>
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex overflow-hidden p-5 gap-5">
                {/* Left Side - Code Editor & Preview & Terminal */}
                <div className="w-1/2 flex flex-col border-2 rounded-xl shadow-lg overflow-hidden bg-background">
                    {/* Tabs */}
                    <div className="border-b bg-muted/30">
                        <div className="flex">
                            <button
                                onClick={() => setActiveTab('code')}
                                className={`flex items-center gap-2 px-6 py-3 border-b-2 transition-all font-medium ${activeTab === 'code'
                                    ? 'border-primary text-primary bg-background'
                                    : 'border-transparent text-muted-foreground hover:text-foreground hover:bg-muted/50'
                                    }`}
                            >
                                <Code className="w-4 h-4" />
                                <span className="text-sm">Code Editor</span>
                            </button>
                            <button
                                onClick={() => setActiveTab('preview')}
                                className={`flex items-center gap-2 px-6 py-3 border-b-2 transition-all font-medium ${activeTab === 'preview'
                                    ? 'border-primary text-primary bg-background'
                                    : 'border-transparent text-muted-foreground hover:text-foreground hover:bg-muted/50'
                                    }`}
                            >
                                <Eye className="w-4 h-4" />
                                <span className="text-sm">Live Preview</span>
                            </button>
                            <button
                                onClick={() => setActiveTab('terminal')}
                                className={`flex items-center gap-2 px-6 py-3 border-b-2 transition-all font-medium ${activeTab === 'terminal'
                                    ? 'border-primary text-primary bg-background'
                                    : 'border-transparent text-muted-foreground hover:text-foreground hover:bg-muted/50'
                                    }`}
                            >
                                <Terminal className="w-4 h-4" />
                                <span className="text-sm">Terminal</span>
                            </button>
                        </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 overflow-auto bg-background">
                        {activeTab === 'code' && (
                            <div className="flex h-full">
                                {/* File Explorer */}
                                <div className="w-1/3 border-r bg-muted/20">
                                    <div className="p-3 border-b bg-muted/30 sticky top-0 flex items-center justify-between">
                                        <div className="flex items-center gap-2">
                                            <FolderTree className="w-4 h-4 text-primary" />
                                            <span className="text-sm font-semibold">Files</span>
                                        </div>
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => createNewFile('new-component.tsx', 'export default function NewComponent() {\n  return (\n    <div>\n      {/* Your code here */}\n    </div>\n  );\n}')}
                                            className="h-8 w-8 p-0"
                                        >
                                            <Plus className="w-4 h-4" />
                                        </Button>
                                    </div>
                                    <div className="overflow-y-auto p-2">
                                        {renderFileTree()}
                                    </div>
                                </div>

                                {/* Code Editor */}
                                <div className="w-2/3 flex flex-col bg-background">
                                    <div className="p-3 border-b flex items-center justify-between bg-muted/20 sticky top-0">
                                        <div className="flex items-center gap-2">
                                            <span className="text-xs font-mono text-muted-foreground">{selectedFile}</span>
                                            {getCurrentEditor()?.isDirty && (
                                                <span className="text-xs text-orange-500">● Modified</span>
                                            )}
                                        </div>
                                        <div className="flex items-center gap-2">
                                            {getCurrentEditor()?.isDirty && (
                                                <Button
                                                    onClick={saveFile}
                                                    size="sm"
                                                    className="h-7 px-3 text-xs"
                                                >
                                                    Save
                                                </Button>
                                            )}
                                            <FileCode className="w-4 h-4 text-primary" />
                                        </div>
                                    </div>
                                    <textarea
                                        ref={fileEditorRef}
                                        value={getCurrentEditor()?.content || ''}
                                        onChange={(e) => handleFileEdit(e.target.value)}
                                        className="flex-1 p-4 text-sm font-mono leading-relaxed overflow-auto resize-none border-0 focus:outline-none focus:ring-0 bg-background text-foreground"
                                        spellCheck={false}
                                        style={{
                                            fontFamily: 'Monaco, Menlo, "Ubuntu Mono", monospace',
                                            lineHeight: '1.5'
                                        }}
                                    />
                                </div>
                            </div>
                        )}

                        {activeTab === 'preview' && (
                            <div className="h-full flex flex-col">
                                {isPreviewRunning && previewUrl ? (
                                    <>
                                        <div className="p-3 border-b flex items-center justify-between bg-muted/20">
                                            <div className="flex items-center gap-2">
                                                <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
                                                <span className="text-xs font-medium">Next.js Preview Running</span>
                                            </div>
                                            <Button
                                                variant="ghost"
                                                size="sm"
                                                onClick={refreshPreview}
                                                className="h-7 px-3 text-xs gap-2"
                                            >
                                                <RefreshCw className="w-3 h-3" />
                                                Refresh
                                            </Button>
                                        </div>
                                        <iframe
                                            key={previewKey}
                                            ref={iframeRef}
                                            src={previewUrl}
                                            className="w-full h-full border-0 bg-white"
                                            title="Next.js Preview"
                                            sandbox="allow-scripts allow-same-origin"
                                        />
                                    </>
                                ) : (
                                    <div className="flex-1 flex items-center justify-center bg-muted/10">
                                        <div className="text-center p-8">
                                            <div className="inline-block p-4 rounded-full bg-muted/50 mb-4">
                                                <Eye className="w-12 h-12 text-muted-foreground" />
                                            </div>
                                            <p className="text-xl font-semibold mb-2">Next.js Preview</p>
                                            <p className="text-sm text-muted-foreground mb-4">Click "Run Preview" to see your Next.js application</p>
                                            <Button onClick={startPreview} className="gap-2">
                                                <Play className="w-4 h-4" />
                                                Start Preview
                                            </Button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        {activeTab === 'terminal' && (
                            <div className="h-full flex flex-col bg-black text-green-400 font-mono">
                                <div className="p-3 border-b border-gray-700 bg-gray-900">
                                    <div className="flex items-center gap-2">
                                        <Terminal className="w-4 h-4 text-green-400" />
                                        <span className="text-sm font-semibold">Terminal</span>
                                    </div>
                                </div>
                                <div className="flex-1 overflow-y-auto p-4">
                                    {terminalCommands.map((cmd) => (
                                        <div key={cmd.id} className="mb-4">
                                            <div className="flex items-center gap-2 mb-1">
                                                <span className="text-blue-400">$</span>
                                                <span>{cmd.command}</span>
                                            </div>
                                            <pre className={`whitespace-pre-wrap text-sm ${cmd.status === 'error' ? 'text-red-400' : 'text-green-300'}`}>
                                                {cmd.output}
                                            </pre>
                                        </div>
                                    ))}
                                    <div ref={terminalEndRef} />
                                </div>
                                <div className="p-3 border-t border-gray-700 bg-gray-900">
                                    <div className="flex items-center gap-2">
                                        <span className="text-blue-400">$</span>
                                        <input
                                            type="text"
                                            value={currentCommand}
                                            onChange={(e) => setCurrentCommand(e.target.value)}
                                            onKeyDown={handleTerminalKeyDown}
                                            placeholder="Enter command (npm run dev, npm install, etc.)"
                                            className="flex-1 bg-transparent border-0 outline-none text-green-400 placeholder-gray-500"
                                            disabled={isRunningCommand}
                                        />
                                        {isRunningCommand && (
                                            <Loader2 className="w-4 h-4 animate-spin" />
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>

                {/* Right Side - Chat Interface */}
                <div className="w-1/2 flex flex-col border-2 rounded-xl shadow-lg overflow-hidden bg-background">
                    {/* Chat Header */}
                    <div className="border-b p-4 bg-muted/30">
                        <div className="flex items-center gap-2">
                            <MessageSquare className="w-5 h-5 text-primary" />
                            <h3 className="font-bold text-lg">AI Assistant</h3>
                        </div>
                        <p className="text-xs text-muted-foreground mt-1">Describe changes with precision - Supports Next.js, TypeScript, Clerk</p>
                    </div>

                    {/* Messages Area */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4">
                        {messages.length === 0 && (
                            <div className="text-center mt-16">
                                <div className="inline-block p-4 rounded-full bg-primary/10 mb-4">
                                    <MessageSquare className="w-8 h-8 text-primary" />
                                </div>
                                <p className="text-xl font-semibold mb-2">Ready to Build with Next.js</p>
                                <p className="text-sm text-muted-foreground max-w-md mx-auto">
                                    Describe what you want to create or modify. I'll provide comprehensive implementation plans including terminal commands and code changes.
                                </p>
                            </div>
                        )}

                        {messages.map((msg, idx) => (
                            <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div
                                    className={`max-w-[85%] rounded-2xl px-4 py-3 shadow-sm ${msg.role === 'user'
                                        ? 'bg-primary text-primary-foreground'
                                        : 'bg-muted border'
                                        }`}
                                >
                                    <p className="text-sm leading-relaxed whitespace-pre-wrap">{msg.content}</p>

                                    {msg.actions && (
                                        <div className="mt-3 space-y-2 pt-3 border-t border-primary-foreground/20">
                                            {msg.actions.map((action: any, aidx: number) => (
                                                <div key={aidx} className="flex items-start gap-2 text-xs opacity-90">
                                                    {action.type === 'file_edit' && (
                                                        <>
                                                            <FileCode className="w-4 h-4 mt-0.5 flex-shrink-0" />
                                                            <div>
                                                                <p className="font-semibold">{action.file}</p>
                                                                <p className="mt-0.5 opacity-80">{action.description}</p>
                                                            </div>
                                                        </>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}

                        {(isProcessing || isExecuting) && currentAction && (
                            <div className="flex items-center gap-3 px-4 py-3 rounded-xl border-2 border-primary/20 bg-primary/5 w-fit">
                                <Loader2 className="w-5 h-5 animate-spin text-primary" />
                                <span className="text-sm font-medium">{currentAction}</span>
                            </div>
                        )}

                        <div ref={chatEndRef} />
                    </div>

                    {/* Input Area */}
                    <div className="border-t p-4 bg-muted/20">
                        <div className="flex gap-3">
                            <Textarea
                                value={prompt}
                                onChange={(e) => {
                                    setPrompt(e.target.value);
                                    setPromptWords(e.target.value.trim().split(/\s+/).length);
                                }}
                                onKeyDown={handleKeyDown}
                                placeholder="Describe what you want to build or modify in your Next.js app..."
                                className={`flex-1 resize-none text-[16px] border-2 bg-background focus:border-primary ${promptWords > 70 ? 'max-h-[700px]' : 'max-h-[360px]'
                                    }`}
                                rows={1}
                                disabled={isProcessing}
                            />
                            <Button
                                onClick={handleSend}
                                disabled={!prompt.trim() || isProcessing}
                                className="h-auto min-h-[80px] px-6"
                            >
                                {isProcessing ? (
                                    <Loader2 className="w-5 h-5 animate-spin" />
                                ) : (
                                    <SendHorizonal className="w-5 h-5" />
                                )}
                            </Button>
                        </div>
                        <div className="flex items-center justify-between mt-2">
                            <p className="text-xs text-muted-foreground">
                                <kbd className="px-2 py-0.5 rounded border text-[10px]">Enter</kbd> to send
                            </p>
                            {promptWords > 0 && (
                                <p className="text-xs text-muted-foreground font-medium">{promptWords} words</p>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            {/* Plan Approval Modal */}
            {showPlanApproval && generatedPlan && (
                <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center p-6 z-50 animate-in fade-in duration-200">
                    <div className="border-2 rounded-2xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden flex flex-col bg-background">
                        <div className="flex items-center justify-between p-6 border-b bg-muted/30">
                            <div className="flex items-center gap-3">
                                <div className="p-3 rounded-xl bg-primary/10">
                                    <FileText className="w-6 h-6 text-primary" />
                                </div>
                                <div>
                                    <h3 className="font-bold text-2xl">Review Implementation Plan</h3>
                                    <p className="text-sm text-muted-foreground mt-1">Edit the specifications below, then approve to implement</p>
                                </div>
                            </div>
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={handleRejectPlan}
                                className="h-10 w-10 p-0"
                            >
                                <X className="w-5 h-5" />
                            </Button>
                        </div>

                        <div className="flex-1 overflow-y-auto p-6">
                            <div className="space-y-6">
                                <div>
                                    <label className="text-sm font-bold mb-3 block flex items-center gap-2">
                                        <Code2 className="w-4 h-4" />
                                        Implementation Plan (Edit as needed)
                                    </label>
                                    <Textarea
                                        value={editableInstructions}
                                        onChange={(e) => setEditableInstructions(e.target.value)}
                                        className="min-h-[500px] font-mono text-sm leading-relaxed border-2 focus:border-primary"
                                        placeholder="Comprehensive implementation plan will appear here..."
                                    />
                                </div>

                                <div className="border-2 rounded-lg p-4 bg-primary/5">
                                    <h4 className="font-semibold mb-2 flex items-center gap-2">
                                        <Terminal className="w-4 h-4 text-primary" />
                                        How it works:
                                    </h4>
                                    <p className="text-sm text-muted-foreground">
                                        This plan includes <strong>code changes</strong> and <strong>terminal commands</strong>. The AI will execute both file modifications and necessary npm commands to implement your changes in the Next.js project.
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div className="flex gap-3 p-6 border-t bg-muted/30">
                            <Button
                                onClick={handleRejectPlan}
                                variant="outline"
                                className="flex-1 h-12 font-medium"
                            >
                                Cancel
                            </Button>
                            <Button
                                onClick={handleExecuteInstructions}
                                className="flex-1 h-12 gap-2 font-medium"
                                disabled={isExecuting}
                            >
                                {isExecuting ? (
                                    <>
                                        <Loader2 className="w-4 h-4 animate-spin" />
                                        Implementing...
                                    </>
                                ) : (
                                    <>
                                        <PlayCircle className="w-4 h-4" />
                                        Execute Plan
                                    </>
                                )}
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Page;